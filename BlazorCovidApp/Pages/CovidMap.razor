@page "/covidMap"
@inject HttpClient Http

<PageTitle>Covid Data Map</PageTitle>

<h1>Covid data map</h1>

<p>This page shows the last entry of positive cases per state through bubble map</p>

<TelerikMap Center="@Center"
            WrapAround="false"
            MinZoom="3"
            MaxZoom="8"
            Zoom="4">
    <MapLayers>
        <MapLayer Type="@MapLayersType.Tile"
                  Attribution="@Attribution"
                  Subdomains="@Subdomains"
                  UrlTemplate="@UrlTemplate">
        </MapLayer>

        <MapLayer Type="@MapLayersType.Bubble"
                  Data="@bubbleModels"
                  LocationField="@nameof(BubbleModel.LatLng)"
                  ValueField="@nameof(BubbleModel.positive)">
            <MapLayerBubbleSettings>
                <MapLayerBubbleSettingsStyle>
                    <MapLayerBubbleSettingsStyleFill Color="#0000ff"></MapLayerBubbleSettingsStyleFill>
                    <MapLayerBubbleSettingsStyleStroke Color="#000000"></MapLayerBubbleSettingsStyleStroke>
                </MapLayerBubbleSettingsStyle>
            </MapLayerBubbleSettings>
        </MapLayer>
    </MapLayers>
</TelerikMap>


@code {

    public string[] Subdomains { get; set; } = new string[] { "a", "b", "c" };
    public string UrlTemplate { get; set; } = "https://#= subdomain #.tile.openstreetmap.org/#= zoom #/#= x #/#= y #.png";
    public string Attribution { get; set; } = "&copy; <a href='https://osm.org/copyright'>OpenStreetMap contributors</a>";
    public double[] Center { get; set; } = new double[] { 30.268107, -97.744821 };
    public List<BubbleModel> bubbleModels;

    protected override async Task OnInitializedAsync()
    {
        //Pulls json from link and inputs into list named statesData
        bubbleModels = await Http.GetFromJsonAsync<List<BubbleModel>>("https://api.covidtracking.com/v1/states/current.json");
        //For each to give each state thier longitude and latitude for map
        foreach (var item in bubbleModels)
        {
            if(item.positive == null){
                if(item.negative!=null){
                    item.positive = item.total-item.positive;
                }
            }
            if(item.state == "WI"){
                item.LatLng = new double[]{ 44.5,-89.5};
            }
            else if(item.state == "WV"){
                item.LatLng = new double[] { 39.0, -80.5 };
            }
            else if (item.state == "VT")
            {
                item.LatLng = new double[] { 44.0,-72.699 };
            }
            else if (item.state == "TX")
            {
                item.LatLng = new double[] { 31.0,-100.0 };
            }
            else if (item.state == "SD")
            {
                item.LatLng = new double[] { 44.5, -100.0 };
            }
            else if (item.state == "RI")
            {
                item.LatLng = new double[] { 41.7,-71.74 };
            }
            else if (item.state == "OR")
            {
                item.LatLng = new double[] { 44.0,-120.5 };
            }
            else if (item.state == "NY")
            {
                item.LatLng = new double[] { 43.0,-75.0 };
            }
            else if (item.state == "NH")
            {
                item.LatLng = new double[] { 44.0,-71.5 };
            }
            else if (item.state == "NE")
            {
                item.LatLng = new double[] { 41.5,-100.0 };
            }
            else if (item.state == "RI")
            {
                item.LatLng = new double[] { 41.74,-71.74 };
            }
            else if (item.state == "OR")
            {
                item.LatLng = new double[] { 44.000000,	-120.500000 };
            }
            else if (item.state == "NY")
            {
                item.LatLng = new double[] { 43.000000,	-75.000000 };
            }
            else if (item.state == "NH")
            {
                item.LatLng = new double[] { 44.000000,	-71.500000 };
            }
            else if (item.state == "NE")
            {
                item.LatLng = new double[] { 41.500000,	-100.000000 };
            }
            else if (item.state == "KS")
            {
                item.LatLng = new double[] { 38.500000,	-98.000000 };
            }
            else if (item.state == "MS")
            {
                item.LatLng = new double[] { 33.000000,	-90.000000 };
            }
            else if (item.state == "IL")
            {
                item.LatLng = new double[] { 40.000000,	-89.000000 };
            }
            else if (item.state == "DE")
            {
                item.LatLng = new double[] { 39.000000,	-75.500000 };
            }
            else if (item.state == "CT")
            {
                item.LatLng = new double[] { 41.599998,	-72.699997 };
            }
            else if (item.state == "AR")
            {
                item.LatLng = new double[] { 34.799999,	-92.199997 };
            }
            else if (item.state == "IN")
            {
                item.LatLng = new double[] { 40.273502,	-86.126976 };
            }
            else if (item.state == "MO")
            {
                item.LatLng = new double[] { 38.573936,	-92.603760 };
            }
            else if (item.state == "FL")
            {
                item.LatLng = new double[] { 27.994402,	-81.760254 };
            }
            else if (item.state == "NV")
            {
                item.LatLng = new double[] { 39.876019,	-117.224121 };
            }
            else if (item.state == "ME")
            {
                item.LatLng = new double[] { 45.367584,	-68.972168 };
            }
            else if (item.state == "MI")
            {
                item.LatLng = new double[] { 44.182205,	-84.506836 };
            }
            else if (item.state == "GA")
            {
                item.LatLng = new double[] { 33.247875,	-83.441162 };
            }
            else if (item.state == "HI")
            {
                item.LatLng = new double[] { 19.741755,	-155.844437 };
            }
            else if (item.state == "AK")
            {
                item.LatLng = new double[] { 66.160507,	-153.369141 };
            }
            else if (item.state == "TN")
            {
                item.LatLng = new double[] { 35.860119,	-86.660156 };
            }
             else if (item.state == "VA")
            {
                item.LatLng = new double[] { 37.926868,	-78.024902 };
            }
            else if (item.state == "NJ")
            {
                item.LatLng = new double[] { 39.833851,	-74.871826 };
            }
            else if (item.state == "KN")
            {
                item.LatLng = new double[] { 37.839333,	-84.270020 };
            }
            else if (item.state == "ND")
            {
                item.LatLng = new double[] { 47.650589,	-100.437012 };
            }
            else if (item.state == "MS")
            {
                item.LatLng = new double[] { 46.392410,	-94.636230 };
            }
            else if (item.state == "OK")
            {
                item.LatLng = new double[] { 36.084621,	-96.921387 };
            }
            else if (item.state == "MT")
            {
                item.LatLng = new double[] { 46.965260,	-109.533691 };
            }
            else if (item.state == "WA")
            {
                item.LatLng = new double[] { 47.751076,	-120.740135 };
            }
            else if (item.state == "UT")
            {
                item.LatLng = new double[] { 39.419220,	-111.950684 };
            }
            else if (item.state == "CO")
            {
                item.LatLng = new double[] { 39.113014,	-105.358887};
            }
            else if (item.state == "OH")
            {
                item.LatLng = new double[] { 40.367474,	-82.996216 };
            }
            else if (item.state == "AL")
            {
                item.LatLng = new double[] { 32.318230,	-86.902298 };
            }
            else if (item.state == "IA")
            {
                item.LatLng = new double[] { 42.032974,	-93.581543 };
            }
            else if (item.state == "NM")
            {
                item.LatLng = new double[] { 34.307144,	-106.018066 };
            }
            else if (item.state == "SC")
            {
                item.LatLng = new double[] { 33.836082,	-81.163727 };
            }
            else if (item.state == "PA")
            {
                item.LatLng = new double[] { 41.203323,	-77.194527 };
            }
            else if (item.state == "AZ")
            {
                item.LatLng = new double[] { 34.048927,	-111.093735 };
            }
            else if (item.state == "MD")
            {
                item.LatLng = new double[] { 39.045753,	-76.641273 };
            }
            else if (item.state == "MA")
            {
                item.LatLng = new double[] { 42.407211,	-71.382439 };
            }
            else if (item.state == "CA")
            {
                item.LatLng = new double[] { 36.778259,	-119.417931 };
            }
            else if (item.state == "ID")
            {
                item.LatLng = new double[] { 44.068203,	-114.742043 };
            }
            else if (item.state == "WY")
            {
                item.LatLng = new double[] { 	43.075970,	-107.290283 };
            }
            else if (item.state == "NC")
            {
                item.LatLng = new double[] { 	35.782169,	-80.793457 };
            }
            else if (item.state == "LA")
            {
                item.LatLng = new double[] { 30.391830,	-92.329102 };
            }
        }
    }

    public class BubbleModel
    {
        //Used variables
        public int date { get; set; }
        //public DateTime newDate => DateTime.ParseExact(date.ToString(), "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.None);
        public double[] LatLng { get; set; }
        public string? state { get; set; }
        public int? positive { get; set; }
        public int? hospitalizedCurrently { get; set; }
        public int? hospitalizedDischarged { get; set; }
        public int? hospitalizedCumulative { get; set; }
        public int? negative { get; set; }
        public double hospitalRate { get; set; }
        public int total { get; set; }

        //Unused variables
        public object probableCases { get; set; }
        public object pending { get; set; }
        public string totalTestResultsSource { get; set; }
        public object totalTestResults { get; set; }
        public object inIcuCurrently { get; set; }
        public object inIcuCumulative { get; set; }
        public object onVentilatorCurrently { get; set; }
        public object onVentilatorCumulative { get; set; }
        public object recovered { get; set; }
        public object lastUpdateEt { get; set; }
        public object dateModified { get; set; }
        public object checkTimeEt { get; set; }
        public object death { get; set; }
        public object hospitalized { get; set; }
        public object dateChecked { get; set; }
        public object totalTestsViral { get; set; }
        public object positiveTestsViral { get; set; }
        public object negativeTestsViral { get; set; }
        public object positiveCasesViral { get; set; }
        public object deathConfirmed { get; set; }
        public object deathProbable { get; set; }
        public object totalTestEncountersViral { get; set; }
        public object totalTestsPeopleViral { get; set; }
        public object totalTestsAntibody { get; set; }
        public object positiveTestsAntibody { get; set; }
        public object negativeTestsAntibody { get; set; }
        public object totalTestsPeopleAntibody { get; set; }
        public object positiveTestsPeopleAntibody { get; set; }
        public object negativeTestsPeopleAntibody { get; set; }
        public object totalTestsPeopleAntigen { get; set; }
        public object positiveTestsPeopleAntigen { get; set; }
        public object totalTestsAntigen { get; set; }
        public object positiveTestsAntigen { get; set; }
        public string fips { get; set; }
        public int positiveIncrease { get; set; }
        public int negativeIncrease { get; set; }
        public int totalTestResultsIncrease { get; set; }
        public int posNeg { get; set; }
        public object dataQualityGrade { get; set; }
        public int deathIncrease { get; set; }
        public int hospitalizedIncrease { get; set; }
        public string hash { get; set; }
        public int commercialScore { get; set; }
        public int negativeRegularScore { get; set; }
        public int negativeScore { get; set; }
        public int positiveScore { get; set; }
        public int score { get; set; }
        public string grade { get; set; }

   
    }
}